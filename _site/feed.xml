<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Watchanan Chantapakul</title>
    <description>I love technologies especially about computer things, thus, this website was created with my enthusiasm for the web development technology.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 18 Dec 2018 19:00:57 +0700</pubDate>
    <lastBuildDate>Tue, 18 Dec 2018 19:00:57 +0700</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Ubuntu 18.04 + CUDA + Nvidia : How to Set Them Up</title>
        <description>&lt;p&gt;Hi folks!&lt;/p&gt;

&lt;p&gt;To make the CUDA works on a computer might be a pain for someone including me, so I just want to memorise the way I make the system work without any problem. In this post, it is based on these requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ubuntu 18.04&lt;/li&gt;
  &lt;li&gt;Nvidia graphic card&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compatibility&quot;&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;The first thing you need to do is to check the compability between &lt;code class=&quot;highlighter-rouge&quot;&gt;Cuda Toolkit version&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux x86_64 driver version&lt;/code&gt;. You can quickly look up the table &lt;a href=&quot;https://docs.nvidia.com/deploy/cuda-compatibility/index.html#binary-compatibility__table-toolkit-driver&quot;&gt;here&lt;/a&gt;. In the case that you want to look at other details, you can go to &lt;a href=&quot;https://docs.nvidia.com/deploy/cuda-compatibility/index.html&quot;&gt;CUDA Compatibility :: GPU Deployment and Management Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For instance, now (2018-12-18), the most up-to-date CUDA version is 10.1, so I will stick to this version, then I check the aforementioned tatble. As a result, I have to install Nvidia driver for Linux 410, as It says (CUDA 10.0 (10.0.130) &amp;gt;= 410.48).&lt;/p&gt;

&lt;h2 id=&quot;nvidia-driver&quot;&gt;Nvidia Driver&lt;/h2&gt;

&lt;p&gt;To install the Nvidia driver 410, just type this (debian-based):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:graphics-drivers/ppa
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install nvidia-driver-410&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And do not forget to reboot your Linux with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo reboot&lt;/code&gt; command.&lt;/p&gt;

&lt;h2 id=&quot;cuda&quot;&gt;CUDA&lt;/h2&gt;
&lt;p&gt;Firstly, you have to download the &lt;a href=&quot;https://developer.nvidia.com/cuda-downloads&quot;&gt;CUDA Toolkit installer&lt;/a&gt;. Note that the version of CUDA Toolkit must be matched with your Nvidia driver version, and vice versa. There are about 4 different ways to install it, so you can easily follow its instruction, but the one that I recommend is to use &lt;strong&gt;runfile (local)&lt;/strong&gt; approach as there are only 2 steps to complete it.&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cp /usr/local/cuda/cuda-testing/samples
make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can make the make comamnd run faster by adding a flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-j?&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; is the number of parallel threads you want it to operate, so the more threads, the more processors you assign it to use. For instance, if my CPU has 8 cores, I can run make command as &lt;code class=&quot;highlighter-rouge&quot;&gt;make -j8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s run an example to check whether it works flawlessly with this command:
./bin/x86_64/linux/release/vectorAdd&lt;/p&gt;

&lt;!-- ## Caffe --&gt;
&lt;!-- 
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; libboost-all-dev &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install liblmdb-dev &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt install libatlas-base-dev &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
 --&gt;

</description>
        <pubDate>Tue, 18 Dec 2018 14:07:56 +0700</pubDate>
        <link>http://localhost:4000/ubuntu/cuda/nvidia/2018/12/18/cuda-on-ubuntu.html</link>
        <guid isPermaLink="true">http://localhost:4000/ubuntu/cuda/nvidia/2018/12/18/cuda-on-ubuntu.html</guid>
        
        
        <category>ubuntu</category>
        
        <category>cuda</category>
        
        <category>nvidia</category>
        
      </item>
    
      <item>
        <title>Structure from Motion : OpenSfM Configuration</title>
        <description>&lt;p&gt;Hi folks!&lt;/p&gt;

&lt;p&gt;Before reading this post, I hope that you have already read the former post about &lt;a href=&quot;/opensfm/cv/2018/12/04/opensfm-setup.html&quot;&gt;How to Setup OpenSfM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, I am going to give you an instruction of running the library. But actually, it is pretty simple and straightforward because it is a library, so a lot of abstraction is working for us.
Assume that the dataset’s name is &lt;code class=&quot;highlighter-rouge&quot;&gt;berlin&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Simply run this command&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bin/opensfm_run_all data/berlin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;If you want to generate a denser point cloud in &lt;code class=&quot;highlighter-rouge&quot;&gt;.ply&lt;/code&gt; file format, then run these commands&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bin/opensfm undistort data/berlin
bin/opensfm compute_depthmaps data/berlin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;The created file will be located in &lt;code class=&quot;highlighter-rouge&quot;&gt;data/berlin/depthmaps/merged.ply&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create a new dataset, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;tommy&lt;/code&gt;, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;data/&lt;/code&gt; folder and create a new folder with your dataset name. Then create another &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; folder inside the folder. All images will be placed in &lt;code class=&quot;highlighter-rouge&quot;&gt;data/tommy/images&lt;/code&gt; as shown below.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── config.yaml
├── images
    ├── 001.jpg
    ├── 002.jpg
    ├── 003.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;

&lt;p&gt;You can browse this url to view the reconstruction meshed result.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:8000/viewer/reconstruction.html#file=/data/berlin/reconstruction.meshed.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/opensfm-reconstruction_viewer.jpg&quot; alt=&quot;Reconstruction View&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A denser point cloud stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;data/berlin/depthmaps/merged.ply&lt;/code&gt; can be visualized in any program that can view &lt;code class=&quot;highlighter-rouge&quot;&gt;ply&lt;/code&gt; file such as &lt;a href=&quot;http://www.meshlab.net/&quot;&gt;MeshLab&lt;/a&gt; to show the point cloud.
&lt;img src=&quot;/assets/opensfm-point_cloud.jpg&quot; alt=&quot;Point Cloud&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;library-configuration&quot;&gt;Library Configuration&lt;/h2&gt;

&lt;p&gt;There are lots of configs we can change inside the OpenSfM library. The main file that contains this configuration is &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt;.
Each &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; file will be placed inside each dataset folder. For instance, the config file of an example dataset named &lt;code class=&quot;highlighter-rouge&quot;&gt;berlin&lt;/code&gt; is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;ROOT/berlin/config.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The full options we can configure is provided &lt;a href=&quot;https://github.com/mapillary/OpenSfM/blob/master/opensfm/config.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;The library has the file that indicates which feature we will use. The file is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;opensfm/features.py&lt;/code&gt;.
There are a number of feature types provided out-of-the-box:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SIFT&lt;/li&gt;
  &lt;li&gt;SURF&lt;/li&gt;
  &lt;li&gt;AKAZE&lt;/li&gt;
  &lt;li&gt;HAHOG (default)&lt;/li&gt;
  &lt;li&gt;ORB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;opencv_contrib&lt;/code&gt; is required to be able to use SIFT or SURF.&lt;/span&gt;
So if you want to change the feature algorithm within these algorithms, you can change the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yaml&lt;/code&gt; file with this line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;feature_type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SIFT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And each feature extraction algorithm also has its parameters, for example, in the case of SIFT.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Params for SIFT&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sift_peak_threshold&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.1&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# Smaller value -&amp;gt; more features&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;sift_edge_threshold&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# See OpenCV doc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 04 Dec 2018 14:21:33 +0700</pubDate>
        <link>http://localhost:4000/opensfm/cv/2018/12/04/opensfm-config.html</link>
        <guid isPermaLink="true">http://localhost:4000/opensfm/cv/2018/12/04/opensfm-config.html</guid>
        
        
        <category>opensfm</category>
        
        <category>cv</category>
        
      </item>
    
      <item>
        <title>Structure from Motion : How to Setup OpenSfM</title>
        <description>&lt;p&gt;Hi folks!&lt;/p&gt;

&lt;p&gt;As I was assigned to do the preliminary about an interesting computer vision algorithm named &lt;strong&gt;Structure from Motion&lt;/strong&gt;, so I am going be breaking the process down a bit as it can ease your process getting into SfM.&lt;/p&gt;

&lt;p&gt;There are people who already implemented SfM algorithm in many languages such as MATLAB, C++, and Python. I have done some searches and found out that &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSfM&lt;/code&gt; library is a potential library to be used mainly because it is an open-source project, so I can modify its codes arbitrarily.&lt;/p&gt;

&lt;p&gt;Let’s get started with how to setup the library.&lt;/p&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;
&lt;p&gt;This part is going to be about how to build the library from its source codes.
First of all, we have to clone the project from GitHub using &lt;code class=&quot;highlighter-rouge&quot;&gt;--recursive&lt;/code&gt; option.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/mapillary/OpenSfM&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we need to make sure that the submodules are updated.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;OpenSfM &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;installing-dependencies&quot;&gt;Installing Dependencies&lt;/h3&gt;
&lt;p&gt;The main dependencies we have to install are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;OpenCV&lt;/li&gt;
  &lt;li&gt;OpenGV&lt;/li&gt;
  &lt;li&gt;Ceres Solver&lt;/li&gt;
  &lt;li&gt;NumPy, SciPy, Networkx, PyYAML, exifread&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;opensfm&quot;&gt;opensfm&lt;/h3&gt;
&lt;p&gt;If you only want to build the source codes to bin/ directory, it will automatically build all codes for you.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python3 setup.py build&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just in case that you need to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;opensfm&lt;/code&gt; package, then use install command through &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.py&lt;/code&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python3 setup.py install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;This section is dedicated to some issues you might be encountering during the setup process.&lt;/p&gt;

&lt;h3 id=&quot;http-server&quot;&gt;HTTP Server&lt;/h3&gt;
&lt;p&gt;As the library utilizes Python simeple HTTP server, in Python 3, you have to use this command instead of the indicated command in the document.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#python3 -m SimpleHTTPServer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;python-version&quot;&gt;Python Version&lt;/h3&gt;
&lt;h4 id=&quot;running-python-scripts&quot;&gt;Running Python Scripts&lt;/h4&gt;
&lt;p&gt;On &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt;, if you are running the OpenSfM scripts with your default python command, it is going to call your &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;, which means Python version 2 by default. So you have to change some files to make it works normally.&lt;/p&gt;
&lt;h5 id=&quot;binopensfm&quot;&gt;bin/opensfm&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the very first line, change it from `python` to `python3`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;binopensfm_run_all&quot;&gt;bin/opensfm_run_all&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# PYTHON=${2:-python}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PYTHON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;python-packages&quot;&gt;Python Packages&lt;/h3&gt;
&lt;h4 id=&quot;pyproj&quot;&gt;pyproj&lt;/h4&gt;
&lt;p&gt;The required dependency of &lt;code class=&quot;highlighter-rouge&quot;&gt;pyproj&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;cython&lt;/code&gt;, so just install it before installing pyproj.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip3 install cython&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The default remote url is sometimes unavailable, so you can use this link instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip3 install git+https://github.com/jswhit/pyproj.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;building-document&quot;&gt;Building Document&lt;/h3&gt;
&lt;h3 id=&quot;sphinx&quot;&gt;Sphinx&lt;/h3&gt;
&lt;p&gt;The document is written on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sphinx&lt;/code&gt; tool and &lt;code class=&quot;highlighter-rouge&quot;&gt;sphinx_rtd_theme&lt;/code&gt;. If you don’t have these packages, just install them through &lt;em&gt;pip&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip3 install Sphinx
pip3 install sphinx_rtd_theme&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 04 Dec 2018 13:57:56 +0700</pubDate>
        <link>http://localhost:4000/opensfm/cv/2018/12/04/opensfm-setup.html</link>
        <guid isPermaLink="true">http://localhost:4000/opensfm/cv/2018/12/04/opensfm-setup.html</guid>
        
        
        <category>opensfm</category>
        
        <category>cv</category>
        
      </item>
    
  </channel>
</rss>
